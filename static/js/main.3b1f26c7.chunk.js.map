{"version":3,"sources":["util.js","terrain-tile-layer.js","app.js","index.js"],"names":["NAIP_IMAGE","baseUrl","URLSearchParams","url","color_ops","toString","naipUrl","SURFACE_IMAGE","bands","landsatUrl","MAPBOX_TOKEN","process","MapboxAccessToken","ELEVATION_DECODER","rScaler","gScaler","bScaler","offset","DUMMY_DATA","getTerrainUrl","x","y","z","replace","getTextureUrl","getOpenMapTilesUrl","getTileData","a","terrainUrl","textureUrl","mvt","coordinates","layerProperty","layers","terrain","loadTerrain","terrainImage","bounds","elevationDecoder","meshMaxError","texture","load","catch","_","Promise","resolve","all","mesh","renderSubLayers","props","data","tile","then","result","SimpleMeshLayer","id","getPolygonOffset","coordinateSystem","COORDINATE_SYSTEM","CARTESIAN","modelMatrix","getModelMatrix","getPosition","d","getColor","worldScale","Math","pow","xScale","yScale","xOffset","yOffset","Matrix4","translate","scale","workerUrl","options","TerrainLoader","INITIAL_VIEW_STATE","latitude","longitude","zoom","bearing","ReactDOM","render","initialViewState","controller","TileLayer","minZoom","maxZoom","maxCacheSize","onClick","console","log","mapStyle","mapOptions","hash","document","getElementById"],"mappings":"iUAyBaA,EAbU,WACrB,IAMIC,EAAU,yDAEd,OADAA,GAFqB,IAAIC,gBALV,CACbC,IACE,gFACFC,UAAW,yCAIWC,WAKAC,GACbC,EA1Ba,WACxB,IAKIN,EACF,2HAEF,OADAA,GAHqB,IAAIC,gBAJV,CACbM,MAAO,QACPJ,UAAW,yDAKWC,WAkBGI,GAEvBC,EAAeC,+IAAYC,kBAGpBC,GAFgB,uFAAmFH,GAE/E,CAC/BI,QAAS,IACTC,QAAS,EACTC,QAAS,EAAI,IACbC,QAAS,Q,QCbLC,EAAa,CAAC,GAEpB,SAASC,EAAT,GAAmC,IAAXC,EAAU,EAAVA,EAAGC,EAAO,EAAPA,EAAGC,EAAI,EAAJA,EAC5B,MDDwB,0ECCHC,QAAQ,MAAOH,GACjCG,QAAQ,MAAOF,GACfE,QAAQ,MAAOD,GAGpB,SAASE,EAAT,GAAmC,IAAXJ,EAAU,EAAVA,EAAGC,EAAO,EAAPA,EAAGC,EAAI,EAAJA,EAI5B,OAAIA,GAAK,GACAtB,EAAWuB,QAAQ,MAAOH,GAC9BG,QAAQ,MAAOF,GACfE,QAAQ,MAAOD,GAGbf,EAAcgB,QAAQ,MAAOH,GACjCG,QAAQ,MAAOF,GACfE,QAAQ,MAAOD,GAGpB,SAASG,EAAT,GAAwC,IAAXL,EAAU,EAAVA,EAAGC,EAAO,EAAPA,EAAGC,EAAI,EAAJA,EACjC,MAAM,6DAAN,OAAoEA,EAApE,YAAyEF,EAAzE,YAA8EC,EAA9E,Q,SAcaK,E,8EAAf,+CAAAC,EAAA,6DAA4BP,EAA5B,EAA4BA,EAAGC,EAA/B,EAA+BA,EAAGC,EAAlC,EAAkCA,EAC1BM,EAAaT,EAAc,CAACC,IAAGC,IAAGC,MAClCO,EAAaL,EAAc,CAACJ,IAAGC,IAAGC,MACzBG,EAAmB,CAACL,IAAGC,IAAGC,MAQhB,CACvBQ,IAAK,CACHC,YAAa,QACbC,cAAe,YACfC,OAAQ,CAAC,oBAKPC,EAAUC,EAAY,CAC1BC,aAAcR,EACdS,OAda,CAAC,EAAG,EAAG,EAAG,GAevBC,iBAAkBzB,EAClB0B,aA/DmB,KAkEfC,EAAUX,EAEZY,YAAKZ,GAAYa,OAAM,SAAAC,GAAC,OAAI,QAC5BC,QAAQC,QAAQ,MA9BtB,UAgCuBD,QAAQE,IAAI,CAACZ,IAhCpC,2CAgCSa,EAhCT,uBA8CSH,QAAQE,IAAI,CAACC,EAAMP,KA9C5B,6C,sBAiDA,SAASQ,EAAgBC,GAAQ,IACxBC,EAAcD,EAAdC,KAAMC,EAAQF,EAARE,KAGPJ,EAAOG,EAAKE,MAAK,SAAAC,GAAM,OAAIA,GAAUA,EAAO,MAC5Cb,EAAUU,EAAKE,MAAK,SAAAC,GAAM,OAAIA,GAAUA,EAAO,MAErD,MAAO,CAYL,IAAIC,IAAgBL,EAAO,CAEzBM,GAAG,6BAAD,OAA+BJ,EAAK/B,EAApC,YAAyC+B,EAAK9B,EAA9C,YAAmD8B,EAAK7B,GAC1D4B,KAAMhC,EACN6B,OACAP,UACAgB,iBAAkB,KAClBC,iBAAkBC,IAAkBC,UACpCC,YAAaC,EAAeV,GAC5BW,YAAa,SAAAC,GAAC,MAAI,CAAC,EAAG,EAAG,IAEzBC,SAAU,CAAC,IAAK,IAAK,QAM3B,SAASH,EAAeV,GACtB,IACMc,EAAaC,KAAKC,IAAI,EAAGhB,EAAK7B,GAE9B8C,EAHa,IAGSH,EACtBI,GAAUD,EAEVE,EANa,IAMWnB,EAAK/B,EAAK6C,EAClCM,EAPa,KAOW,EAAIpB,EAAK9B,EAAI4C,GAE3C,OAAO,IAAIO,KAAUC,UAAU,CAACH,EAASC,EAAS,IAAIG,MAAM,CAACN,EAAQC,EAAQ,IAG/E,SAASlC,EAAT,GAAyF,IAAnEC,EAAkE,EAAlEA,aAAcC,EAAoD,EAApDA,OAAQC,EAA4C,EAA5CA,iBAAkBC,EAA0B,EAA1BA,aAAcoC,EAAY,EAAZA,UAC1E,IAAKvC,EACH,OAAO,KAET,IAAMwC,EAAU,CACd1C,QAAS,CACPG,SACAE,eACAD,qBAMJ,OAHIqC,IACFC,EAAQ1C,QAAQyC,UAAYA,GAEvBlC,YAAKL,EAAcyC,IAAeD,GCtK3C,IAAME,EAAqB,CACzBC,SAAU,MACVC,WAAY,OACZC,KAAM,KACNC,QAAS,KCNXC,IAASC,OAAO,mBDUD,WACb,OACE,kBAAC,IAAD,CACEC,iBAAkBP,EAClBQ,YAAY,EACZrD,OAAQ,CD+BL,IAAIsD,IAAU,CACnBhC,GAAI,gBACJiC,QAAS,EACTC,QAAS,GACT/D,cACAsB,kBACA0C,aAAc,OCpCZC,QAASC,QAAQC,KAIjB,kBAAC,IAAD,CACEC,SAAS,sFACTC,WAAY,CAACC,MAAM,QCtBX,MAASC,SAASC,eAAe,U","file":"static/js/main.3b1f26c7.chunk.js","sourcesContent":["export const landsatUrl = () => {\n  const params = {\n    bands: '4,3,2',\n    color_ops: 'gamma RGB 3.5, saturation 1.7, sigmoidal RGB 15 0.35'\n  };\n  const searchParams = new URLSearchParams(params);\n  let baseUrl =\n    'https://landsat-lambda.kylebarron.dev/tiles/229bc0ed88ac7f39effdb554efa0959766e41bb3948754faba13f74f/{z}/{x}/{y}@2x.jpg?';\n  baseUrl += searchParams.toString();\n  return baseUrl;\n};\n\nexport const naipUrl = () => {\n  const params = {\n    url:\n      \"dynamodb://us-west-2/7610d6d77fca346802fb21b89668cb12ef3162a31eb71734a8aaf5de\",\n    color_ops: \"sigmoidal RGB 4 0.5, saturation 1.25\",\n  };\n  const searchParams = new URLSearchParams(params);\n  let baseUrl = \"https://naip-lambda.kylebarron.dev/{z}/{x}/{y}@2x.jpg?\";\n  baseUrl += searchParams.toString();\n  return baseUrl;\n};\n\nexport const TERRAIN_IMAGE = `https://s3.amazonaws.com/elevation-tiles-prod/terrarium/{z}/{x}/{y}.png`;\nexport const NAIP_IMAGE = naipUrl();\nexport const SURFACE_IMAGE = landsatUrl();\n\nconst MAPBOX_TOKEN = process.env.MapboxAccessToken; // eslint-disable-line\nexport const MAPBOX_SATELLITE = `https://api.mapbox.com/v4/mapbox.satellite/{z}/{x}/{y}@2x.jpg90?access_token=${MAPBOX_TOKEN}`\n\nexport const ELEVATION_DECODER = {\n  rScaler: 256,\n  gScaler: 1,\n  bScaler: 1 / 256,\n  offset: -32768\n};\n","import {SimpleMeshLayer} from '@deck.gl/mesh-layers';\nimport {COORDINATE_SYSTEM} from '@deck.gl/core';\nimport {load} from '@loaders.gl/core';\nimport {TerrainLoader} from '@loaders.gl/terrain';\nimport {TileLayer} from '@deck.gl/geo-layers';\n// import { TileLayer } from \"/Users/kyle/github/mapping/deck.gl/modules/geo-layers/src/tile-layer\";\n\nimport {\n  TERRAIN_IMAGE,\n  NAIP_IMAGE,\n  SURFACE_IMAGE,\n  ELEVATION_DECODER,\n  MAPBOX_SATELLITE\n} from './util';\n// import {GeoJsonLayer} from '@deck.gl/layers';\nimport {MVTLoader} from '@loaders.gl/mvt';\nimport {Matrix4} from 'math.gl';\n// import SnapFeatures from '@kylebarron/snap-to-tin';\n// import { parseMapboxStyle, featuresArrayToObject } from \"@kylebarron/deckgl-style-spec\";\n// import style from './style.json'\n\nconst MESH_MAX_ERROR = 20;\nconst DUMMY_DATA = [1];\n\nfunction getTerrainUrl({x, y, z}) {\n  return TERRAIN_IMAGE.replace('{x}', x)\n    .replace('{y}', y)\n    .replace('{z}', z);\n}\n\nfunction getTextureUrl({x, y, z}) {\n  // return MAPBOX_SATELLITE.replace('{x}', x)\n  //   .replace('{y}', y)\n  //   .replace('{z}', z);\n  if (z >= 12) {\n    return NAIP_IMAGE.replace('{x}', x)\n      .replace('{y}', y)\n      .replace('{z}', z);\n  }\n\n  return SURFACE_IMAGE.replace('{x}', x)\n    .replace('{y}', y)\n    .replace('{z}', z);\n}\n\nfunction getOpenMapTilesUrl({x, y, z}) {\n  return `https://mbtiles.nst.guide/services/openmaptiles/own/tiles/${z}/${x}/${y}.pbf`;\n}\n\nexport function TerrainTileLayer() {\n  return new TileLayer({\n    id: \"terrain-tiles\",\n    minZoom: 0,\n    maxZoom: 14,\n    getTileData,\n    renderSubLayers,\n    maxCacheSize: 200,\n  });\n}\n\nasync function getTileData({x, y, z}) {\n  const terrainUrl = getTerrainUrl({x, y, z});\n  const textureUrl = getTextureUrl({x, y, z});\n  const mvtUrl = getOpenMapTilesUrl({x, y, z});\n\n  // minx, miny, maxx, maxy\n  // This is used to flip the image so that the origin is at the top left,\n  // because the default MVT coordinates have the origin in the top left\n  const bounds = [0, 1, 1, 0];\n\n  // Load vector tile\n  const mvtLoaderOptions = {\n    mvt: {\n      coordinates: 'local',\n      layerProperty: 'layerName',\n      layers: ['transportation']\n    }\n  }\n  // const mvttile = load(mvtUrl, MVTLoader, mvtLoaderOptions);\n  // Load terrain tile\n  const terrain = loadTerrain({\n    terrainImage: terrainUrl,\n    bounds,\n    elevationDecoder: ELEVATION_DECODER,\n    meshMaxError: MESH_MAX_ERROR\n  });\n  // Load satellite image\n  const texture = textureUrl\n    ? // If surface image fails to load, the tile should still be displayed\n      load(textureUrl).catch(_ => null)\n    : Promise.resolve(null);\n\n  const [mesh] = await Promise.all([terrain]);\n  // const [mesh, mvtFeatures] = await Promise.all([terrain, mvttile]);\n  // const snap = new SnapFeatures({\n  //   indices: mesh.indices.value,\n  //   positions: mesh.attributes.POSITION.value,\n  //   bounds: [0, 0, 1, 1]\n  // })\n  // const newFeatures = snap.snapFeatures({features: mvtFeatures})\n\n  // var featuresObject = featuresArrayToObject({features: newFeatures, layerName: 'layerName', sourceName: 'openmaptiles'})\n  // var test = parseMapboxStyle({style, features: featuresObject, zoom: 13})\n  // console.log(test)\n\n  // return Promise.all([mesh, texture, newFeatures]);\n  return Promise.all([mesh, texture]);\n}\n\nfunction renderSubLayers(props) {\n  const {data, tile} = props;\n\n  // Resolve promises\n  const mesh = data.then(result => result && result[0]);\n  const texture = data.then(result => result && result[1]);\n  // const features = data.then(result => result && result[2]);\n  return [\n    // new GeoJsonLayer(props, {\n    //   // NOTE: currently you need to set each sublayer id so they don't conflict\n    //   id: `geojson-layer-${tile.x}-${tile.y}-${tile.z}`,\n    //   data: features,\n    //   // Important for z-fighting\n    //   getPolygonOffset: d => [0, -1000],\n    //   lineWidthMinPixels: 5,\n    //   coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n    //   modelMatrix: getModelMatrix(tile),\n    //   pickable: true\n    // }),\n    new SimpleMeshLayer(props, {\n      // NOTE: currently you need to set each sublayer id so they don't conflict\n      id: `terrain-simple-mesh-layer-${tile.x}-${tile.y}-${tile.z}`,\n      data: DUMMY_DATA,\n      mesh,\n      texture,\n      getPolygonOffset: null,\n      coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n      modelMatrix: getModelMatrix(tile),\n      getPosition: d => [0, 0, 0],\n      // Color to use if surfaceImage is unavailable\n      getColor: [255, 255, 255]\n    })\n  ];\n}\n\n// From https://github.com/uber/deck.gl/blob/b1901b11cbdcb82b317e1579ff236d1ca1d03ea7/modules/geo-layers/src/mvt-tile-layer/mvt-tile-layer.js#L41-L52\nfunction getModelMatrix(tile) {\n  const WORLD_SIZE = 512;\n  const worldScale = Math.pow(2, tile.z);\n\n  const xScale = WORLD_SIZE / worldScale;\n  const yScale = -xScale;\n\n  const xOffset = (WORLD_SIZE * tile.x) / worldScale;\n  const yOffset = WORLD_SIZE * (1 - tile.y / worldScale);\n\n  return new Matrix4().translate([xOffset, yOffset, 0]).scale([xScale, yScale, 1]);\n}\n\nfunction loadTerrain({terrainImage, bounds, elevationDecoder, meshMaxError, workerUrl}) {\n  if (!terrainImage) {\n    return null;\n  }\n  const options = {\n    terrain: {\n      bounds,\n      meshMaxError,\n      elevationDecoder\n    }\n  };\n  if (workerUrl) {\n    options.terrain.workerUrl = workerUrl;\n  }\n  return load(terrainImage, TerrainLoader, options);\n}\n","/* eslint-disable max-statements */\nimport React from 'react';\nimport DeckGL from '@deck.gl/react';\nimport {StaticMap} from 'react-map-gl';\nimport {TerrainTileLayer} from './terrain-tile-layer';\n\nconst INITIAL_VIEW_STATE = {\n  latitude: 46.21,\n  longitude: -122.18,\n  zoom: 11.5,\n  bearing: 140\n  // pitch: 60\n};\n\nexport default function App() {\n  return (\n    <DeckGL\n      initialViewState={INITIAL_VIEW_STATE}\n      controller={true}\n      layers={[TerrainTileLayer()]}\n      onClick={console.log}\n      // onHover={x => console.log(x)}\n      // pickingRadius={5}\n    >\n      <StaticMap\n        mapStyle=\"https://raw.githubusercontent.com/kylebarron/fiord-color-gl-style/master/style.json\"\n        mapOptions={{hash: true}}\n      />\n    </DeckGL>\n  );\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}